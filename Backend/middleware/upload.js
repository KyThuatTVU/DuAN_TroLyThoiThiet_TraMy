const multer = require('multer');
const path = require('path');

/**
 * C·∫•u h√¨nh multer cho upload ·∫£nh th·ªùi ti·∫øt
 */
const storage = multer.memoryStorage(); // L∆∞u trong memory ƒë·ªÉ x·ª≠ l√Ω tr·ª±c ti·∫øp

const fileFilter = (req, file, cb) => {
    // Ch·ªâ ch·∫•p nh·∫≠n c√°c file ·∫£nh
    if (file.mimetype.startsWith('image/')) {
        cb(null, true);
    } else {
        cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, GIF, WebP)'), false);
    }
};

const limits = {
    fileSize: 10 * 1024 * 1024, // 10MB
    files: 1 // Ch·ªâ cho ph√©p 1 file
};

/**
 * Middleware upload ·∫£nh th·ªùi ti·∫øt
 */
const uploadWeatherImage = multer({
    storage,
    fileFilter,
    limits
}).single('image'); // Field name l√† 'image'

/**
 * Wrapper ƒë·ªÉ handle multer errors
 */
const handleImageUpload = (req, res, next) => {
    uploadWeatherImage(req, res, (err) => {
        if (err instanceof multer.MulterError) {
            if (err.code === 'LIMIT_FILE_SIZE') {
                return res.status(400).json({
                    error: 'File qu√° l·ªõn',
                    message: 'K√≠ch th∆∞·ªõc file t·ªëi ƒëa l√† 10MB'
                });
            } else if (err.code === 'LIMIT_FILE_COUNT') {
                return res.status(400).json({
                    error: 'Qu√° nhi·ªÅu file',
                    message: 'Ch·ªâ ƒë∆∞·ª£c upload 1 file'
                });
            } else if (err.code === 'LIMIT_UNEXPECTED_FILE') {
                return res.status(400).json({
                    error: 'Field kh√¥ng h·ª£p l·ªá',
                    message: 'S·ª≠ d·ª•ng field name "image" ƒë·ªÉ upload'
                });
            }
            
            return res.status(400).json({
                error: 'L·ªói upload',
                message: err.message
            });
        } else if (err) {
            return res.status(400).json({
                error: 'File kh√¥ng h·ª£p l·ªá',
                message: err.message
            });
        }
        
        next();
    });
};

/**
 * Middleware validate image sau khi upload
 */
const validateImage = (req, res, next) => {
    if (!req.file) {
        // N·∫øu kh√¥ng c√≥ file, c√≥ th·ªÉ l√† optional t√πy v√†o endpoint
        return next();
    }

    const { buffer, mimetype, originalname, size } = req.file;

    // Ki·ªÉm tra th√™m c√°c ƒëi·ªÅu ki·ªán
    if (size === 0) {
        return res.status(400).json({
            error: 'File r·ªóng',
            message: 'File ·∫£nh kh√¥ng c√≥ n·ªôi dung'
        });
    }

    // Log th√¥ng tin file
    console.log(`üì∏ Upload th√†nh c√¥ng: ${originalname}`);
    console.log(`üìä Th√¥ng tin: ${mimetype}, ${(size / 1024).toFixed(1)}KB`);

    next();
};

/**
 * Middleware x·ª≠ l√Ω l·ªói upload
 */
const handleUploadError = (err, req, res, next) => {
    if (err) {
        console.error('‚ùå Upload error:', err);
        
        return res.status(500).json({
            error: 'L·ªói x·ª≠ l√Ω file',
            message: 'Kh√¥ng th·ªÉ x·ª≠ l√Ω file upload'
        });
    }
    
    next();
};

module.exports = {
    uploadWeatherImage,
    handleImageUpload,
    validateImage,
    handleUploadError,
    
    // C√°c c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng ri√™ng l·∫ª
    storage,
    fileFilter,
    limits
};