const axios = require('axios');
const cheerio = require('cheerio');

class GoogleSearchService {
    constructor() {
        this.searchEngineId = process.env.GOOGLE_SEARCH_ENGINE_ID;
        this.apiKey = process.env.GOOGLE_SEARCH_API_KEY;
        this.baseUrl = 'https://www.googleapis.com/customsearch/v1';
    }

    /**
     * T√¨m ki·∫øm th√¥ng tin tr√™n Google
     * @param {string} query - T·ª´ kh√≥a t√¨m ki·∫øm
     * @param {number} numResults - S·ªë k·∫øt qu·∫£ c·∫ßn l·∫•y (m·∫∑c ƒë·ªãnh 3)
     * @returns {Promise<Array>} - Danh s√°ch k·∫øt qu·∫£ t√¨m ki·∫øm
     */
    async searchGoogle(query, numResults = 3) {
        try {
            console.log(`üîç ƒêang t√¨m ki·∫øm Google cho: "${query}"`);

            // N·∫øu kh√¥ng c√≥ API key, s·ª≠ d·ª•ng web scraping
            if (!this.apiKey || !this.searchEngineId) {
                return await this.fallbackWebSearch(query, numResults);
            }

            const response = await axios.get(this.baseUrl, {
                params: {
                    key: this.apiKey,
                    cx: this.searchEngineId,
                    q: query,
                    num: numResults,
                    safe: 'active'
                }
            });

            if (response.data && response.data.items) {
                const results = response.data.items.map(item => ({
                    title: item.title,
                    link: item.link,
                    snippet: item.snippet,
                    source: 'Google Custom Search'
                }));

                console.log(`‚úÖ T√¨m th·∫•y ${results.length} k·∫øt qu·∫£ t·ª´ Google`);
                return results;
            }

            return [];
        } catch (error) {
            console.error('‚ùå L·ªói Google Search API:', error.message);
            // Fallback to web search
            return await this.fallbackWebSearch(query, numResults);
        }
    }

    /**
     * T√¨m ki·∫øm web fallback khi kh√¥ng c√≥ API key
     * @param {string} query - T·ª´ kh√≥a t√¨m ki·∫øm
     * @param {number} numResults - S·ªë k·∫øt qu·∫£ c·∫ßn l·∫•y
     * @returns {Promise<Array>} - Danh s√°ch k·∫øt qu·∫£ t√¨m ki·∫øm
     */
    async fallbackWebSearch(query, numResults = 3) {
        try {
            console.log(`üåê S·ª≠ d·ª•ng web search fallback cho: "${query}"`);
            
            // S·ª≠ d·ª•ng DuckDuckGo ho·∫∑c t√¨m ki·∫øm tin t·ª©c t·ª´ c√°c trang web
            const weatherSources = await this.searchWeatherSources(query);
            return weatherSources.slice(0, numResults);
        } catch (error) {
            console.error('‚ùå L·ªói fallback search:', error.message);
            return [];
        }
    }

    /**
     * T√¨m ki·∫øm th√¥ng tin th·ªùi ti·∫øt t·ª´ c√°c ngu·ªìn tin t·ª©c
     * @param {string} query - T·ª´ kh√≥a t√¨m ki·∫øm
     * @returns {Promise<Array>} - Danh s√°ch k·∫øt qu·∫£
     */
    async searchWeatherSources(query) {
        const results = [];
        
        try {
            // T√¨m ki·∫øm t·ª´ AccuWeather (ti·∫øng Vi·ªát)
            const accuWeatherResult = await this.searchAccuWeather(query);
            if (accuWeatherResult) results.push(accuWeatherResult);

            // T√¨m ki·∫øm t·ª´ VnExpress Th·ªùi ti·∫øt
            const vnexpressResult = await this.searchVnExpressWeather(query);
            if (vnexpressResult) results.push(vnexpressResult);

            // T√¨m ki·∫øm t·ª´ B√°o Thanh Ni√™n Th·ªùi ti·∫øt
            const thanhNienResult = await this.searchThanhNienWeather(query);
            if (thanhNienResult) results.push(thanhNienResult);

        } catch (error) {
            console.error('‚ùå L·ªói t√¨m ki·∫øm weather sources:', error.message);
        }

        return results;
    }

    /**
     * T√¨m ki·∫øm t·ª´ AccuWeather
     */
    async searchAccuWeather(query) {
        try {
            const searchUrl = `https://www.accuweather.com/vi/search-locations?query=${encodeURIComponent(query)}`;
            const response = await axios.get(searchUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                },
                timeout: 5000
            });

            return {
                title: `Th√¥ng tin th·ªùi ti·∫øt ${query} - AccuWeather`,
                link: searchUrl,
                snippet: `D·ª± b√°o th·ªùi ti·∫øt chi ti·∫øt cho ${query} t·ª´ AccuWeather`,
                source: 'AccuWeather'
            };
        } catch (error) {
            return null;
        }
    }

    /**
     * T√¨m ki·∫øm t·ª´ VnExpress
     */
    async searchVnExpressWeather(query) {
        try {
            return {
                title: `Tin t·ª©c th·ªùi ti·∫øt ${query} - VnExpress`,
                link: `https://vnexpress.net/tim-kiem?q=${encodeURIComponent(query + ' th·ªùi ti·∫øt')}`,
                snippet: `Tin t·ª©c v√† d·ª± b√°o th·ªùi ti·∫øt v·ªÅ ${query} t·ª´ VnExpress`,
                source: 'VnExpress'
            };
        } catch (error) {
            return null;
        }
    }

    /**
     * T√¨m ki·∫øm t·ª´ B√°o Thanh Ni√™n
     */
    async searchThanhNienWeather(query) {
        try {
            return {
                title: `D·ª± b√°o th·ªùi ti·∫øt ${query} - Thanh Ni√™n`,
                link: `https://thanhnien.vn/tim-kiem.html?keywords=${encodeURIComponent(query + ' th·ªùi ti·∫øt')}`,
                snippet: `Th√¥ng tin th·ªùi ti·∫øt v√† kh√≠ h·∫≠u ${query} t·ª´ b√°o Thanh Ni√™n`,
                source: 'Thanh Ni√™n'
            };
        } catch (error) {
            return null;
        }
    }

    /**
     * T√¨m ki·∫øm th√¥ng tin th·ªùi ti·∫øt c·ª• th·ªÉ
     * @param {string} location - ƒê·ªãa ƒëi·ªÉm
     * @param {string} topic - Ch·ªß ƒë·ªÅ (b√£o, m∆∞a, n·∫Øng n√≥ng, v.v.)
     * @returns {Promise<Array>} - K·∫øt qu·∫£ t√¨m ki·∫øm
     */
    async searchWeatherInfo(location, topic = '') {
        const query = topic ? 
            `${topic} ${location} th·ªùi ti·∫øt d·ª± b√°o` : 
            `th·ªùi ti·∫øt ${location} d·ª± b√°o h√¥m nay`;
            
        return await this.searchGoogle(query, 5);
    }

    /**
     * T√¨m ki·∫øm tin t·ª©c th·ªùi ti·∫øt m·ªõi nh·∫•t
     * @returns {Promise<Array>} - Tin t·ª©c th·ªùi ti·∫øt
     */
    async searchLatestWeatherNews() {
        const query = 'tin t·ª©c th·ªùi ti·∫øt Vi·ªát Nam h√¥m nay';
        return await this.searchGoogle(query, 4);
    }

    /**
     * Ki·ªÉm tra t·ª´ kh√≥a c√≥ li√™n quan ƒë·∫øn th·ªùi ti·∫øt kh√¥ng
     * @param {string} message - Tin nh·∫Øn t·ª´ user
     * @returns {boolean} - True n·∫øu li√™n quan ƒë·∫øn th·ªùi ti·∫øt
     */
    isWeatherRelated(message) {
        const weatherKeywords = [
            'th·ªùi ti·∫øt', 'd·ª± b√°o', 'b√£o', 'm∆∞a', 'n·∫Øng', 'l·∫°nh', 'n√≥ng',
            'ƒë·ªô ·∫©m', 'gi√≥', 'nhi·ªát ƒë·ªô', 'kh√≠ h·∫≠u', 'th·ªùi ti·∫øt', 'weather',
            'forecast', 'rain', 'sun', 'storm', 'temperature', 'humidity',
            '√°p th·∫•p', 'si√™u b√£o', 'l≈© l·ª•t', 'h·∫°n h√°n', 's∆∞∆°ng m√π'
        ];
        
        const lowerMessage = message.toLowerCase();
        return weatherKeywords.some(keyword => lowerMessage.includes(keyword));
    }

    /**
     * Tr√≠ch xu·∫•t v·ªã tr√≠ t·ª´ tin nh·∫Øn
     * @param {string} message - Tin nh·∫Øn
     * @returns {string|null} - T√™n ƒë·ªãa ƒëi·ªÉm
     */
    extractLocation(message) {
        const vietnameseCities = [
            'h√† n·ªôi', 's√†i g√≤n', 'h·ªì ch√≠ minh', 'ƒë√† n·∫µng', 'h·∫£i ph√≤ng',
            'c·∫ßn th∆°', 'nha trang', 'hu·∫ø', 'v≈©ng t√†u', 'ƒë√† l·∫°t',
            'h·∫° long', 'ph√∫ qu·ªëc', 'quy nhon', 'vinh', 'bu√¥n ma thu·ªôt',
            'b·∫Øc ninh', 'nam ƒë·ªãnh', 'th√°i b√¨nh', 'h∆∞ng y√™n', 'h·∫£i d∆∞∆°ng',
            'qu·∫£ng ninh', 'l√†o cai', 's∆°n la', 'ƒëi·ªán bi√™n', 'lai ch√¢u',
            'cao b·∫±ng', 'l·∫°ng s∆°n', 'b·∫Øc giang', 'th√°i nguy√™n', 'tuy√™n quang',
            'h√† giang', 'y√™n b√°i', 'ph√∫ th·ªç', 'vƒ©nh ph√∫c', 'b·∫Øc k·∫°n',
            'tr√† vinh', 'vƒ©nh long', 'an giang', 'ki√™n giang', 'c√† mau',
            'b·∫°c li√™u', 's√≥c trƒÉng', 'h·∫≠u giang', 'ƒë·ªìng th√°p', 'ti·ªÅn giang',
            'b·∫øn tre', 'long an', 't√¢y ninh', 'b√¨nh d∆∞∆°ng', 'ƒë·ªìng nai',
            'b√† r·ªãa v≈©ng t√†u', 'b√¨nh thu·∫≠n', 'ninh thu·∫≠n', 'kh√°nh h√≤a',
            'ph√∫ y√™n', 'b√¨nh ƒë·ªãnh', 'qu·∫£ng ng√£i', 'qu·∫£ng nam', 'th·ª´a thi√™n hu·∫ø',
            'qu·∫£ng b√¨nh', 'qu·∫£ng tr·ªã', 'h√† tƒ©nh', 'ngh·ªá an', 'thanh h√≥a',
            'ninh b√¨nh', 'h√≤a b√¨nh', 'mi·ªÅn b·∫Øc', 'mi·ªÅn trung', 'mi·ªÅn nam'
        ];

        const lowerMessage = message.toLowerCase();
        
        for (const city of vietnameseCities) {
            if (lowerMessage.includes(city)) {
                return city;
            }
        }
        
        return null;
    }
}

module.exports = new GoogleSearchService();