const geminiService = require('../services/geminiService');
const fs = require('fs').promises;
const path = require('path');

class ImageWeatherController {
    /**
     * Ph√¢n t√≠ch ·∫£nh th·ªùi ti·∫øt
     */
    async analyzeWeatherImage(req, res) {
        try {
            if (!req.file) {
                return res.status(400).json({
                    error: 'Kh√¥ng t√¨m th·∫•y file ·∫£nh',
                    message: 'Vui l√≤ng upload m·ªôt file ·∫£nh'
                });
            }

            const { buffer, mimetype, originalname } = req.file;
            const userPrompt = req.body.prompt || '';
            const location = req.body.location || '';

            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
            if (!mimetype.startsWith('image/')) {
                return res.status(400).json({
                    error: 'File kh√¥ng h·ª£p l·ªá',
                    message: 'Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, GIF, WebP)'
                });
            }

            // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 10MB)
            if (buffer.length > 10 * 1024 * 1024) {
                return res.status(400).json({
                    error: 'File qu√° l·ªõn',
                    message: 'K√≠ch th∆∞·ªõc file t·ªëi ƒëa l√† 10MB'
                });
            }

            console.log(`üì∏ Nh·∫≠n ·∫£nh: ${originalname} (${mimetype}, ${(buffer.length / 1024).toFixed(1)}KB)`);

            // Ph√¢n t√≠ch ·∫£nh v·ªõi Gemini Vision
            const analysis = await geminiService.analyzeWeatherImage(
                buffer, 
                mimetype, 
                userPrompt
            );

            // L∆∞u metadata ƒë·ªÉ tracking (optional)
            const metadata = {
                filename: originalname,
                mimetype,
                size: buffer.length,
                location,
                userPrompt,
                timestamp: new Date().toISOString(),
                analysis: analysis.substring(0, 200) + '...' // L∆∞u m·ªôt ph·∫ßn k·∫øt qu·∫£
            };

            res.json({
                success: true,
                analysis,
                metadata: {
                    filename: originalname,
                    size: `${(buffer.length / 1024).toFixed(1)}KB`,
                    location,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error) {
            console.error('‚ùå L·ªói ph√¢n t√≠ch ·∫£nh th·ªùi ti·∫øt:', error);
            
            let errorMessage = 'Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh th·ªùi ti·∫øt';
            let statusCode = 500;

            if (error.message.includes('safety filter')) {
                errorMessage = '·∫¢nh b·ªã ch·∫∑n b·ªüi b·ªô l·ªçc an to√†n. Vui l√≤ng th·ª≠ ·∫£nh kh√°c.';
                statusCode = 400;
            } else if (error.message.includes('quota exceeded')) {
                errorMessage = 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.';
                statusCode = 429;
            } else if (error.message.includes('kh√¥ng kh·∫£ d·ª•ng')) {
                errorMessage = 'D·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng';
                statusCode = 503;
            }

            res.status(statusCode).json({
                error: errorMessage,
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }

    /**
     * Chat v·ªõi ·∫£nh th·ªùi ti·∫øt
     */
    async chatWithWeatherImage(req, res) {
        try {
            if (!req.file) {
                return res.status(400).json({
                    error: 'Kh√¥ng t√¨m th·∫•y file ·∫£nh',
                    message: 'Vui l√≤ng upload m·ªôt file ·∫£nh'
                });
            }

            const { buffer, mimetype, originalname } = req.file;
            const message = req.body.message || 'Ph√¢n t√≠ch th·ªùi ti·∫øt trong ·∫£nh n√†y';
            const location = req.body.location || '';

            console.log(`üí¨üì∏ Chat v·ªõi ·∫£nh: ${originalname}`);
            console.log(`üí≠ Tin nh·∫Øn: ${message}`);

            // Ph√¢n t√≠ch ·∫£nh v·ªõi c√¢u h·ªèi c·ª• th·ªÉ
            const response = await geminiService.analyzeWeatherImage(
                buffer, 
                mimetype, 
                message
            );

            res.json({
                success: true,
                reply: response,
                imageInfo: {
                    filename: originalname,
                    size: `${(buffer.length / 1024).toFixed(1)}KB`,
                    location,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error) {
            console.error('‚ùå L·ªói chat v·ªõi ·∫£nh:', error);
            
            res.status(500).json({
                error: 'Kh√¥ng th·ªÉ x·ª≠ l√Ω chat v·ªõi ·∫£nh',
                reply: 'üòÖ Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh n√†y. C√≥ th·ªÉ th·ª≠ v·ªõi ·∫£nh kh√°c kh√¥ng?',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }

    /**
     * L·∫•y danh s√°ch c√°c lo·∫°i ·∫£nh th·ªùi ti·∫øt ƒë∆∞·ª£c h·ªó tr·ª£
     */
    getSupportedImageTypes(req, res) {
        const supportedTypes = [
            {
                type: 'image/jpeg',
                extensions: ['.jpg', '.jpeg'],
                description: 'JPEG images'
            },
            {
                type: 'image/png',
                extensions: ['.png'],
                description: 'PNG images'
            },
            {
                type: 'image/gif',
                extensions: ['.gif'],
                description: 'GIF images'
            },
            {
                type: 'image/webp',
                extensions: ['.webp'],
                description: 'WebP images'
            }
        ];

        const tips = [
            'üì∏ Ch·ª•p ·∫£nh b·∫ßu tr·ªùi r√µ n√©t ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t',
            'üå§Ô∏è ·∫¢nh c√≥ th·ªÉ ch·ª©a m√¢y, n·∫Øng, m∆∞a, ho·∫∑c c√°c hi·ªán t∆∞·ª£ng th·ªùi ti·∫øt kh√°c',
            'üèôÔ∏è ·∫¢nh c√≥ th·ªÉ l√† c·∫£nh quan, ƒë∆∞·ªùng ph·ªë, ho·∫∑c t·ª´ c·ª≠a s·ªï',
            'üì± K√≠ch th∆∞·ªõc file t·ªëi ƒëa: 10MB',
            'ü§ñ AI s·∫Ω ph√¢n t√≠ch v√† d·ª± ƒëo√°n th·ªùi ti·∫øt d·ª±a tr√™n ·∫£nh'
        ];

        res.json({
            supportedTypes,
            maxFileSize: '10MB',
            tips,
            examples: [
                '·∫¢nh b·∫ßu tr·ªùi c√≥ m√¢y',
                '·∫¢nh tr·ªùi m∆∞a',
                '·∫¢nh ho√†ng h√¥n',
                '·∫¢nh s∆∞∆°ng m√π',
                '·∫¢nh c·∫ßu v·ªìng',
                '·∫¢nh tuy·∫øt r∆°i'
            ]
        });
    }

    /**
     * T·∫°o d·ª± b√°o t·ª´ m√¥ t·∫£ ·∫£nh
     */
    async generateForecastFromDescription(req, res) {
        try {
            const { description, location } = req.body;

            if (!description) {
                return res.status(400).json({
                    error: 'Thi·∫øu m√¥ t·∫£ ·∫£nh',
                    message: 'Vui l√≤ng cung c·∫•p m√¥ t·∫£ v·ªÅ ·∫£nh th·ªùi ti·∫øt'
                });
            }

            console.log(`üîÆ T·∫°o d·ª± b√°o t·ª´ m√¥ t·∫£: ${description}`);

            const forecast = await geminiService.generateWeatherForecast(description, location);

            res.json({
                success: true,
                forecast,
                input: {
                    description,
                    location,
                    timestamp: new Date().toISOString()
                }
            });

        } catch (error) {
            console.error('‚ùå L·ªói t·∫°o d·ª± b√°o:', error);
            
            res.status(500).json({
                error: 'Kh√¥ng th·ªÉ t·∫°o d·ª± b√°o th·ªùi ti·∫øt',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    }
}

module.exports = new ImageWeatherController();